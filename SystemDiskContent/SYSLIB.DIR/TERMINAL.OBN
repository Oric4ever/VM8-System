MODULE Terminal;
IMPORT SYSTEM;
CONST
    clearEol* = 0; insertDelete* = 1; highlightNormal* = 2;

    NUL=0X; BACKSP=08X; TAB=09X; LF=0AX; CR=0DX; CANCEL=18X; ESC=1BX; DEL=7FX;
    CONSTAT = 1; CONIN = 2; CONOUT = 3;

(* $O- remove overflow tests *)
(* $[+ remove procedure names *)

VAR numRows*, numCols* : INTEGER;
    available* : SET; (* of clearEol, insertDelete, highlightNormal *)

    lastReadChar : CHAR;
    mustReadAgain: BOOLEAN;
    initialized  : BOOLEAN;
    readlineProc : PROCEDURE(VAR s: ARRAY OF CHAR);

PROCEDURE ReadChar*(VAR ch: CHAR);
BEGIN
  IF NOT mustReadAgain THEN lastReadChar := CHR(SYSTEM.SYS(CONIN,0)) END;
  ch := lastReadChar;
  mustReadAgain := FALSE;
END ReadChar;

PROCEDURE BusyRead*(VAR ch: CHAR);
VAR c: CHAR;
BEGIN
  IF mustReadAgain THEN ch := lastReadChar
  ELSE
    IF SYSTEM.SYS(CONSTAT,0) = 0
    THEN ch := NUL
    ELSE ch := CHR(SYSTEM.SYS(CONIN,0));
         IF ch # NUL THEN lastReadChar := ch END;
    END;
  END;
  mustReadAgain := FALSE;
END BusyRead;

PROCEDURE ReadAgain*; BEGIN mustReadAgain := TRUE END ReadAgain;

(* Write operations aren't available yet so use a procedure variable *)
PROCEDURE ReadLine*(VAR s: ARRAY OF CHAR); BEGIN readlineProc(s) END ReadLine;

PROCEDURE WriteChar*(ch: CHAR);
VAR dummy: INTEGER;
BEGIN
  dummy := SYSTEM.SYS(CONOUT, ORD(ch))
END WriteChar;

PROCEDURE WriteLn*; BEGIN WriteChar(CR); WriteChar(LF) END WriteLn;

PROCEDURE WriteString*(s: ARRAY OF CHAR);
VAR i: INTEGER;
BEGIN
  i := 0; WHILE (i < LEN(s)) AND (s[i] # NUL) DO WriteChar(s[i]); INC(i) END
END WriteString;

PROCEDURE ClearScreen*; BEGIN WriteString("[H[J") END ClearScreen;

PROCEDURE GotoXY*(col,row: INTEGER);
BEGIN
  INC(row); INC(col);
  IF col < 1 THEN col := 1 END;
  IF row < 1 THEN row := 1 END;
  WriteChar(ESC); WriteChar('[');
  IF row >= 100 THEN WriteChar(CHR(row DIV 100 + ORD('0'))); row := row MOD 100 END;
  WriteChar(CHR(row DIV 10 + ORD('0'))); WriteChar(CHR(row MOD 10 + ORD('0')));
  WriteChar(';');
  IF col >= 100 THEN WriteChar(CHR(col DIV 100 + ORD('0'))); col := col MOD 100 END;
  WriteChar(CHR(col DIV 10 + ORD('0'))); WriteChar(CHR(col MOD 10 + ORD('0')));
  WriteChar('H');
END GotoXY;

PROCEDURE InitScreen*;
  PROCEDURE CursorPositionReport():INTEGER;
  VAR char : CHAR;
      row  : INTEGER;
  BEGIN
    WriteString("[6n");
    (* Reads a Cursor Position Report (CPR) and returns the current row *)
    ReadChar(char); (* should be ESC *)
    ReadChar(char); (* should be [   *)
    ReadChar(char); (* should be 0-9 *)
    row := 0;
    WHILE (char >= '0') AND (char <= '9') DO
      row := row * 10 + ORD(char) - ORD('0');
      ReadChar(char);
    END;
    REPEAT ReadChar(char) UNTIL char = 'R';
    RETURN row
  END CursorPositionReport;
BEGIN
  ClearScreen;
  numCols := 0;
  REPEAT INC(numCols); WriteChar('-') UNTIL CursorPositionReport() # 1;
  WriteChar(CR);
  FOR numRows:=1 TO 160 DO WriteChar(LF) END;
  numRows := CursorPositionReport();
  ClearScreen;
  initialized := TRUE;
END InitScreen;

(* ExitScreen has been replaced by CursorPositionReport above...
PROCEDURE ExitScreen*; BEGIN END ExitScreen;
*)

PROCEDURE ClearToEOL*; BEGIN WriteString("[K")    END ClearToEOL;
PROCEDURE InsertLine*; BEGIN WriteString("[L")    END InsertLine;
PROCEDURE DeleteLine*; BEGIN WriteString("[M")    END DeleteLine;
PROCEDURE Highlight*;  BEGIN WriteString("[1m")   END Highlight;
PROCEDURE Normal*;     BEGIN WriteString("[m")    END Normal;
PROCEDURE CursorOff*;  BEGIN WriteString("[?25l") END CursorOff;
PROCEDURE CursorOn*;   BEGIN WriteString("[?25h") END CursorOn;
PROCEDURE Home*;       BEGIN WriteString("[H")    END Home;

PROCEDURE Background*(color: INTEGER);
BEGIN
  WriteString("[4"); WriteChar(CHR( ORD('0') + color )); WriteChar('m')
END Background;

PROCEDURE Foreground*(color: INTEGER);
BEGIN
  WriteString("[3"); WriteChar(CHR( ORD('0') + color )); WriteChar('m')
END Foreground;

PROCEDURE FinalReadLine(VAR s: ARRAY OF CHAR);
VAR ch  : CHAR;
    length : INTEGER;
BEGIN
  length := 0;
  REPEAT
    ReadChar(ch);
    IF ch = TAB THEN ch := ' ' END;
    IF (ch = BACKSP) OR (ch = DEL) THEN
      IF length # 0 THEN
        WriteChar(BACKSP); WriteChar(' '); WriteChar(BACKSP);
        DEC(length)
      END;
    ELSIF ch = CANCEL THEN
      WHILE length # 0 DO
        WriteChar(BACKSP); WriteChar(' '); WriteChar(BACKSP);
        DEC(length)
      END;
    ELSIF (ch < DEL) AND (ch # CR) THEN
      s[length] := ch;
      IF ch < ' ' THEN Highlight; WriteChar(CHR(ORD(ch)+64)); Normal
      ELSE WriteChar(ch)
      END;
      INC(length)
    END;
  UNTIL (ch = CR) OR (length >= LEN(s));
  IF length < LEN(s) THEN s[length] := NUL END;
  WriteLn
END FinalReadLine;

BEGIN
  available := {clearEol, insertDelete, highlightNormal};
  readlineProc := FinalReadLine;
  IF NOT initialized THEN InitScreen END;
END Terminal.