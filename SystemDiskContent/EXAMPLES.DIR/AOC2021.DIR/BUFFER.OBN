MODULE Buffer;
IMPORT Elem;
CONST Size = 512;
TYPE ValueFct* = PROCEDURE(x: Elem.Type):INTEGER;

VAR buffer: ARRAY Size OF Elem.Type;
    putIndex, getIndex: INTEGER;

PROCEDURE IsEmpty*(): BOOLEAN;
BEGIN RETURN putIndex = getIndex
END IsEmpty;

PROCEDURE Enqueue*(elem: Elem.Type);
BEGIN
  buffer[putIndex] := elem;
  putIndex := (putIndex + 1) MOD Size;
  ASSERT( putIndex # getIndex );
END Enqueue;

PROCEDURE Dequeue*(VAR elem: Elem.Type);
BEGIN
  ASSERT( putIndex # getIndex );
  elem := buffer[getIndex];
  getIndex := (getIndex + 1) MOD Size
END Dequeue;

PROCEDURE Contains*(elem: Elem.Type): BOOLEAN;
VAR found: BOOLEAN;
    index: INTEGER;
BEGIN
  found := FALSE;
  index := getIndex;
  WHILE (index # putIndex) & NOT found DO
    found := Elem.Equals(elem, buffer[index]);
    index := (index + 1) MOD Size
  END;
  RETURN found
END Contains;
    
PROCEDURE ExtractMin*(f: ValueFct; VAR elem: Elem.Type);
VAR index, value, min, bestIndex: INTEGER;
BEGIN
  ASSERT( putIndex # getIndex );
  min       := f(buffer[getIndex]);
  bestIndex := getIndex;
  index     := (getIndex + 1) MOD Size;
  WHILE index # putIndex DO
    value := f(buffer[index]);
    IF value < min THEN bestIndex := index; min := value END;
    index := (index + 1) MOD Size;
  END;
  elem := buffer[bestIndex]; buffer[bestIndex] := buffer[getIndex];
  getIndex := (getIndex + 1) MOD Size
END ExtractMin;

END Buffer.